<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Member">

<!-- 	<select id="select" parameterType="map" resultType="MemberDTO"> -->
<!-- 		SELECT IDX -->
<!-- 			 , ID -->
<!-- 			 , NAME -->
<!-- 			 , PHONE -->
<!-- 			 , ADDRESS -->
<!-- 			 , E_MAIL -->
<!-- 			 , JUMIN -->
<!-- 		  FROM MEMBERS -->
<!-- 		 WHERE 1=1 -->
<!-- 		<if test="!ID.equals('') and ID != null"> -->
<!-- 		   AND ID LIKE CONCAT('%', #{ID}, '%')	   -->
<!-- 		</if> -->
<!-- 		<if test="!NAME.equals('') and NAME != null"> -->
<!-- 		   AND NAME LIKE CONCAT('%', #{NAME}, '%')	   -->
<!-- 		</if> -->
<!-- 		<if test="!PHONE.equals('') and PHONE != null"> -->
<!-- 		   AND PHONE LIKE CONCAT('%', #{PHONE}, '%') 	   -->
<!-- 		</if> -->
<!-- 		<if test="!ADDRESS.equals('') and ADDRESS != null"> -->
<!-- 		   AND ADDRESS LIKE CONCAT('%', #{ADDRESS}, '%') 	   -->
<!-- 		</if> -->
<!-- 		<if test="!BIRTH.equals('') and BIRTH != null"> -->
<!-- 		   AND BIRTH LIKE CONCAT('%', #{BIRTH}, '%')  	   -->
<!-- 		</if> -->
<!-- 		<if test="!E_MAIL.equals('') and E_MAIL != null"> -->
<!-- 		   AND E_MAIL = #{E_MAIL}	   -->
<!-- 		</if> -->
<!-- 	</select> -->

<!-- 	회원가입 -->
	<insert id="insertMember" parameterType="MemberDTO">
		INSERT INTO MEMBERS
		 	 ( MEM_IDX
		 	 , MEM_ID
		 	 , MEM_PASS
		 	 , MEM_NAME
		 	 , MEM_PHONE
		 	 , MEM_JOIN_D
		 	 , MEM_EMAIL  
		 	 , MEM_BIRTH_D
		 	 , MEM_ADDRESS
		 	 , MEM_POINT)
		VALUES (
				(SELECT *
				  FROM (SELECT IFNULL(MAX(CAST(MEM_IDX as unsigned)), 0) + 1
						  FROM MEMBERS) A)
			 , #{memId}
			 , #{memPass}
			 , #{memName}
			 , #{memPhone}
			 , #{memJoinD}
			 , #{memEmail}
			 , #{memBirthD}
			 , #{memAddress}
			 , 3000)
	</insert>
	
<!-- 	회원가입 아이디 중복확인 -->
	<select id="checkId" parameterType="String"   resultType="int">
		SELECT COUNT(*)
		FROM MEMBERS
		WHERE MEM_ID = #{id}
	</select>
	
	<!-- 	회원가입 이메일 중복확인 -->
	<select id="checkEmail" parameterType="String"   resultType="int">
		SELECT COUNT(*)
		FROM MEMBERS
		WHERE MEM_EMAIL = #{email}
	</select>
	
	<select id="userCheck" parameterType="MemberDTO" resultType="MemberDTO">
		SELECT *
		FROM MEMBERS
		WHERE MEM_ID = #{memId}
		AND   MEM_PASS = #{memPass}	
<!-- 		AND   MEM_STATUS = '0' -->
	</select>
	
	<!--간편로그인 id값 가져오기  -->
	<select id="getSimpleId" parameterType="String" resultType="String">
		SELECT MEM_ID
		FROM MEMBERS
		WHERE MEM_EMAIL = #{memEmail}
	</select>	
	
<!-- 	회원 아이디/비밀번호 찾기 -->
	<select id="userFind" parameterType="MemberDTO" resultType="MemberDTO">
		SELECT *
		FROM MEMBERS
		WHERE 1=1
		<if test = "memName != null  and !memName.equals('')">
		AND	  MEM_NAME = #{memName}
		</if>
	  	<if test = "memBirthD != null  and !memBirthD.equals('')">			  
		AND   MEM_BIRTH_D = #{memBirthD}	
		</if>
		<if test = "memPhone != null and  !memPhone.equals('')">
		AND	  MEM_PHONE = #{memPhone}
		</if>
		<if test = " memId != null  and !memId.equals('')">
		AND	  MEM_ID = #{memId}
		</if>		
		<if test = "memEmail != null  and !memEmail.equals('')">
		AND	  MEM_EMAIL = #{memEmail}
		</if>
		
	</select>

<!-- 	회원 아이디 찾기 -->
<!-- 	<select id="userFind" parameterType="MemberDTO" resultType="MemberDTO"> -->
<!-- 		SELECT MEM_ID -->
<!-- 		FROM MEMBERS -->
<!-- 		WHERE MEM_NAME = #{memName} -->
<!-- 		AND   MEM_BIRTH_D = #{memBirthD}	 -->
<!-- 		AND	  MEM_PHONE = #{memPhone} -->
<!-- 	</select> -->
	
	<select id="getMember" parameterType="String" resultType="MemberDTO">
		SELECT *
		FROM MEMBERS
		WHERE MEM_ID = #{value}
	</select>	

<!-- 회원탈퇴 -->
<!-- 	<delete id="deleteMember" parameterType="MemberDTO"> -->
<!-- 		DELETE FROM MEMBERS -->
<!-- 		 WHERE MEM_ID = #{memId} -->
<!-- 	</delete> -->
	<update id="deleteMember" parameterType="MemberDTO">
		UPDATE MEMBERS
		   SET MEM_DELETE_D = SYSDATE()
		 WHERE MEM_ID = #{memId};
	</update>
	
<!-- 	회원정보수정 -->
	<update id="updateMember" parameterType="MemberDTO">
		UPDATE MEMBERS
		SET 
<!-- 			MEM_PASS  = #{memPass} -->
		    MEM_PHONE = #{memPhone}
		  , MEM_EMAIL = #{memEmail}
		  , MEM_ADDRESS = #{memAddress}
		WHERE MEM_ID = #{memId}
	</update>
	
	<!-- 비밀번호 변경 -->
	<update id="updatePasswd" parameterType="MemberDTO">
		UPDATE MEMBERS
		SET
			MEM_PASS = #{memPass}
		WHERE MEM_ID = #{memId}
	</update>
	
	
<!-- 	<delete id="delete"> -->
<!-- 		DELETE FROM MEMBERS -->
<!-- 		 WHERE IDX = #{idx} -->
<!-- 	</delete> -->
	
	
<!-- 	<select id="getBoardList" parameterType="MemberDTO"> -->
<!-- 		SELECT * -->
<!-- 		FROM MEMBERS -->
<!-- 		ORDER BY MEM_ID DESC -->
<!-- 		LIMIT #{startRow}, #{pageSize} -->
<!-- 	</select> -->
	
	<select id="getBoardCount" resultType="Integer">
		SELECT COUNT(*)
		FROM MEMBERS
	</select>
	
	<select id="getBoardList" parameterType="map" resultType="MemberDTO">
		SELECT *
		  FROM MEMBERS
		LIMIT #{startRow}, #{pageSize}
	</select>
	
	
	<select id="getMemPoint" parameterType="String" resultType="String">
		SELECT FORMAT(MEM_POINT, 0)
		  FROM MEMBERS
		 WHERE MEM_ID = #{value}
	</select>
	
	<update id="setPoint" parameterType="MemberDTO">
		UPDATE MEMBERS
		   SET MEM_POINT = CAST(MEM_POINT AS UNSIGNED) + CAST(#{memPoint} AS SIGNED)
		 WHERE MEM_ID = #{memId}
	</update>
	
	
	<!-- 	회원가입시 포인트 적립 -->
	<insert id="joinPoint" parameterType="String">
		INSERT
		  INTO POINT
		  	 ( 
		  	   MEM_ID
		  	 , POINT_PLUS
		  	 , POINT_DETAIL
		  	 , POINT_DATE
		  	 )
		VALUES
			 (
			   #{value}
			 , 3000
			 , "회원가입 축하 지급"	
			 , NOW()
			 ) 
	</insert>
	
	<select id="getPointList" parameterType="String" resultType="PointDTO">
		SELECT MEM_ID
			 , POINT_PLUS
			 , POINT_MINUS
			 , POINT_DETAIL
			 , POINT_DATE
		  FROM POINT
		 WHERE 1 = 1
		   AND MEM_ID = #{value}
	</select>
	
	<insert id="setPointInfo" parameterType="PointDTO">
		INSERT
		  INTO POINT
		     (
		       MEM_ID
		     , POINT_PLUS
		     , POINT_MINUS
		     , POINT_DETAIL
		     , MERCHANT_UID
		     , POINT_DATE
		     )
		VALUES
		<if test='!pointPlus.equals("0")' >
			 ( 
			   #{memId}
			 , #{pointPlus}
			 , NULL
			<if test='pointDetail != null and pointDetail.equals("환불")'>
			 , #{pointDetail}
			</if>
			<if test='pointDetail == null || !pointDetail.equals("환불")'>
			 , '영화 예매'
			</if>
		     , #{merchantUid}
			 , NOW()
			 )
		</if>
		<if test='!pointPlus.equals("0") and !pointMinus.equals("0")'>
			,
		</if>	 
		<if test='!pointMinus.equals("0")' >
			( 
			   #{memId}
			 , NULL
			 , #{pointMinus}
			<if test='pointDetail != null and pointDetail.equals("환불")'>
			 , #{pointDetail}
			</if>
			<if test='pointDetail == null || !pointDetail.equals("환불")'>
			 , '영화 예매'
			</if>
		     , #{merchantUid}
			 , NOW()
			 )
		</if>
	</insert>
	
	
	<select id="selectPointPlus" parameterType="String" resultType="String">
		SELECT POINT_PLUS
		  FROM POINT
		 WHERE 1 = 1 
		   AND MERCHANT_UID = #{mid}
		   AND POINT_PLUS IS NOT NULL
		   
	</select>
	<select id="selectPointMinus" parameterType="String" resultType="String">
		SELECT IFNULL(POINT_MINUS, '0')  -- IFNULL 필요없긴함
		  FROM POINT
		 WHERE 1 = 1 
		   AND MERCHANT_UID = #{mid}
		   AND POINT_MINUS IS NOT NULL
	</select>
	
	
	
	
	
	
	
</mapper>