<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="CsAdmin">
	
	<select id="getExqBoardList" resultType="ExqBoardDTO" parameterType="PageDTO">
		SELECT *, ROW_NUMBER() OVER (ORDER BY CREATE_DATE) AS RN
		  FROM EXQBOARD
   		 ORDER BY CREATE_DATE  DESC 
   		 LIMIT #{startRow}, #{pageSize}
	</select>
	<select id="exqBoardCount" resultType="int"> 
		SELECT COUNT(*) 
		  FROM EXQBOARD
	</select>
	<select id="getExqSearchList" resultType="ExqBoardDTO" parameterType="map">
		SELECT *, ROW_NUMBER() OVER (ORDER BY CREATE_DATE) AS RN
		  FROM EXQBOARD
		 WHERE EXQSELECT = #{exqSelect} 
   		 ORDER BY CREATE_DATE  DESC 
   		 LIMIT #{pageDTO.startRow}, #{pageDTO.pageSize}
	</select>
	<select id="getExqBSearchCount" resultType="int" parameterType="String">
		SELECT COUNT(*) 
		  FROM EXQBOARD
		 WHERE EXQSELECT = #{exqSelect}
	</select>
	<select id="getExqBoardAll" resultType="ExqBoardDTO">
		SELECT *, ROW_NUMBER() OVER (ORDER BY CREATE_DATE) AS RN
		  FROM EXQBOARD
   		 ORDER BY CREATE_DATE  DESC 
	</select>
	<update id="updateExqBoard" parameterType="ExqBoardDTO" >
		UPDATE EXQBOARD 
		   SET EXQSUBJECT = #{exqSubject}, EXQCONTENT = #{exqContent}, UPDATE_USER = #{updateUser}, UPDATE_DATE = SYSDATE()
		 WHERE CREATE_DATE = #{createDate} AND CREATE_USER = #{createUser}
	</update>
	<delete id="deleteExqBoard" parameterType="ExqBoardDTO">
		DELETE FROM EXQBOARD
 		 WHERE CREATE_USER = #{createUser} AND CREATE_DATE = #{createDate}
	</delete>
	<insert id="exqBoardInsert" parameterType="ExqBoardDTO">
		INSERT INTO EXQBOARD (EXQSUBJECT,EXQCONTENT,EXQSELECT,CREATE_USER,CREATE_DATE,UPDATE_USER,UPDATE_DATE)
		VALUES
		(
		#{exqSubject}
		,#{exqContent}
		,#{exqSelect}
		,#{createUser}
		,SYSDATE()
		,NULL
		,NULL
		);
	</insert>
	
	<select id="getCenterBoardList" resultType="CenterBoardDTO" parameterType="PageDTO">
		SELECT *,
	       (SELECT C.CI_NAME
	          FROM CINEMA AS C
	         WHERE C.LO_IDX = CENTER.LO_IDX AND C.CI_IDX = CENTER.CI_IDX) AS 'CI_NAME',
       	 ROW_NUMBER() OVER (ORDER BY CENTER.CREATE_DATE) AS RN
	 	 FROM CENTERBOARD AS CENTER
		 ORDER BY CENTER.CREATE_DATE DESC
		 LIMIT #{startRow}, #{pageSize}	
	</select>
	<select id="centerBoardCount" resultType="int">
		SELECT COUNT(*) 
		  FROM CENTERBOARD
	</select>
	<select id="getCenterBoardAll" resultType="centerBoardDTO">
		SELECT *,
	       (SELECT C.CI_NAME
	          FROM CINEMA AS C
	         WHERE C.LO_IDX = CENTER.LO_IDX AND C.CI_IDX = CENTER.CI_IDX) AS 'CI_NAME',
       	 ROW_NUMBER() OVER (ORDER BY CENTER.CREATE_DATE) AS RN
	 	 FROM CENTERBOARD AS CENTER
		 ORDER BY CENTER.CREATE_DATE DESC
	</select>
	<select id="getCenterBoard" resultType="CenterBoardDTO" parameterType="map">
		 SELECT *,
		       (SELECT C.CI_NAME
		          FROM CINEMA AS C
		         WHERE C.LO_IDX = CENTER.LO_IDX AND C.CI_IDX = CENTER.CI_IDX) AS 'CI_NAME'
		  FROM CENTERBOARD AS CENTER
		 WHERE CREATE_USER = #{createUser} AND CREATE_DATE = #{createDate}
	</select>
	<update id="saveCenterContent" parameterType="centerBoardDTO">
		UPDATE CENTERBOARD 
		   SET CENTERSUBJECT = #{centerSubject}, CENTERCONTENT = #{centerContent}, UPDATE_USER = #{updateUser}, UPDATE_DATE = SYSDATE()
		 WHERE CREATE_USER = #{createUser} AND CREATE_DATE = #{createDate}
	</update>
	<delete id="deleteCenterContent" parameterType="centerBoardDTO">
		DELETE FROM CENTERBOARD
 		 WHERE CREATE_USER = #{createUser} AND CREATE_DATE = #{createDate}
	</delete>
	<select id="getRegionList" resultType="LocationDTO">
		SELECT * 
		  FROM LOCATION
	</select>
	<select id="getCinemaList" resultType="CinemaDTO" parameterType="String">
		SELECT CI_IDX,CI_NAME
		  FROM CINEMA
		 WHERE LO_IDX = #{loIdx};
	</select>
	<insert id="insertCenterWrite" parameterType="CenterBoardDTO">
		INSERT INTO CENTERBOARD (LO_IDX,CI_IDX,CENTERSUBJECT,CENTERCONTENT,CREATE_USER,CREATE_DATE,UPDATE_USER,UPDATE_DATE)
		VALUES
		(
		 #{loIdx}
		,#{ciIdx}
		,#{centerSubject}
		,#{centerContent}
		,#{createUser}
		,sysdate()
		,NULL
		,NULL
		)
	</insert>
	
	<select id="getQnaBoardList" resultType="QnaBoardDTO" parameterType="PageDTO">
		SELECT *, ROW_NUMBER() OVER (ORDER BY CREATE_DATE) AS RN
	  	  FROM QNABOARD
 		 ORDER BY CREATE_DATE  DESC 
 		 LIMIT #{startRow}, #{pageSize}
	</select>
	<select id="getQnaBoardCount" resultType="int">
		SELECT COUNT(*) 
	 	  FROM QNABOARD
	</select>
	<select id="getQnaBoardAll" resultType="QnaBoardDTO">
		SELECT *, ROW_NUMBER() OVER (ORDER BY CREATE_DATE) AS RN
	  	  FROM QNABOARD
 		 ORDER BY CREATE_DATE  DESC 
	</select>
	<select id="searchQnaBoardList" resultType="QnaBoardDTO" parameterType="map">
		SELECT *, ROW_NUMBER() OVER (ORDER BY CREATE_DATE) AS RN
	  	  FROM QNABOARD
	  	 WHERE QNACATEGORY = #{qnaCategory}
 		 ORDER BY CREATE_DATE  DESC 
 		 LIMIT #{pageDTO.startRow}, #{pageDTO.pageSize}
	</select>
	<select id="getQnaBoard" resultType="QnaBoardDTO" parameterType="map">
		 SELECT *
		   FROM QNABOARD
		  WHERE CREATE_USER = #{createUser} AND CREATE_DATE = #{createDate};
	</select>
	<update id="updateQnaBoard" parameterType="QnaBoardDTO">
		UPDATE QNABOARD
		   SET QNARESPONSE = #{qnaResponse}, RESPONSE_USER = #{responseUser}, RESPONSE_DATE = SYSDATE()
		 WHERE CREATE_USER = #{createUser} AND CREATE_DATE = #{createDate}
	</update>
	<insert id="qnaBoardInsert" parameterType="QnaBoardDTO">
		INSERT INTO QNABOARD
		VALUES ((SELECT *
		   FROM (SELECT IFNULL(MAX(CAST(QNAIDX as unsigned)), 0) + 1
				   FROM QNABOARD) Q)
		,#{qnaCategory}
		,#{qnaSubject}
		,#{qnaContent}
		,NULL
		,#{createUser}
		,SYSDATE()
		,NULL
		,NULL
		,#{qnaSecret}
		);
	</insert>
	<delete id="deleteQnaBoard" parameterType="QnaBoardDTO">
		DELETE FROM QNABOARD
		 WHERE CREATE_USER = #{createUser} AND CREATE_DATE = #{createDate} 
	</delete>
	<select id="searchQnaBoardCount" resultType="int" parameterType="String">
		SELECT COUNT(*) 
		  FROM QNABOARD 
		 WHERE QNACATEGORY = #{qnaCategory};
	</select>
	<select id="myPageQnaBoardList" parameterType="map" resultType="QnaBoardDTO">
		SELECT *, ROW_NUMBER() OVER (ORDER BY CREATE_DATE) AS RN
	  	  FROM QNABOARD
	  	 WHERE CREATE_USER = #{createUser}
 		 ORDER BY CREATE_DATE  DESC 
 		 LIMIT #{pageDTO.startRow}, #{pageDTO.pageSize}
	</select>
	<select id="getMyPageQnaCount" parameterType="String" resultType="int">
		SELECT COUNT(*) 
	 	  FROM QNABOARD
	 	 WHERE CREATE_USER = #{createUser} 
	</select>
	<select id="myQnaStatusList" parameterType="map" resultType="QnaBoardDTO">
		SELECT *, ROW_NUMBER() OVER (ORDER BY CREATE_DATE) AS RN
	  	  FROM QNABOARD
	  	 WHERE CREATE_USER = #{createUser} AND
	  	 <choose>
		    <when test="qnaResponse == 0">
		        QNARESPONSE IS NULL
		    </when>
		    <otherwise>
		        QNARESPONSE IS NOT NULL
		    </otherwise>
		</choose>
 		 ORDER BY CREATE_DATE  DESC 
 		 LIMIT #{pageDTO.startRow}, #{pageDTO.pageSize}
	</select>
	<select id="myPageQnaStatusCount" parameterType="map" resultType="int">
		SELECT COUNT(*) 
	 	  FROM QNABOARD
	 	 WHERE CREATE_USER = #{createUser} AND
	 	 <choose>
		    <when test="qnaResponse == 0">
		        QNARESPONSE IS NULL
		    </when>
		    <otherwise>
		        QNARESPONSE IS NOT NULL
		    </otherwise>
		</choose>
	</select>
	
	<select id="getLostBoardList" resultType="LostBoardDTO" parameterType="PageDTO">
		SELECT *,
		       (SELECT C.CI_NAME
		          FROM CINEMA AS C
		         WHERE C.LO_IDX = LOST.LO_IDX AND C.CI_IDX = LOST.CI_IDX) AS 'CI_NAME',
		       ROW_NUMBER() OVER (ORDER BY LOST.CREATE_DATE) AS RN
		  FROM LOSTBOARD AS LOST
		 ORDER BY LOST.CREATE_DATE DESC
		 LIMIT #{startRow}, #{pageSize}
	</select>
	<select id="getLostBoardCount" resultType="int">
		SELECT COUNT(*) 
		  FROM LOSTBOARD
	</select>
	<select id="getlostBoardAll" resultType="LostBoardDTO">
		SELECT *,
		       (SELECT C.CI_NAME
		          FROM CINEMA AS C
		         WHERE C.LO_IDX = LOST.LO_IDX AND C.CI_IDX = LOST.CI_IDX) AS 'CI_NAME',
		       ROW_NUMBER() OVER (ORDER BY LOST.CREATE_DATE) AS RN
		  FROM LOSTBOARD AS LOST
		 ORDER BY LOST.CREATE_DATE DESC
	</select>
	<select id="getLostBoard" resultType="LostBoardDTO" parameterType="map">
		 SELECT *,
			      (SELECT C.CI_NAME
			         FROM CINEMA AS C
		        	WHERE C.LO_IDX = LOST.LO_IDX AND C.CI_IDX = LOST.CI_IDX) AS 'CI_NAME'
		  FROM LOSTBOARD AS LOST
		 WHERE CREATE_USER = #{createUser} AND CREATE_DATE = #{createDate}
	</select>
	<update id="updateLostBoard" parameterType="LostBoardDTO">
		UPDATE LOSTBOARD
		SET
		    LOSTRESPONSE = #{lostResponse},
		    RESPONSE_USER = #{responseUser},
		    RESPONSE_DATE = SYSDATE(),
		    LOSTSTATUS = CASE
		        WHEN LOSTRESPONSE IS NULL THEN 0
		        ELSE 1
		    END
		WHERE
		    CREATE_USER = #{createUser}
		    AND CREATE_DATE = #{createDate}
	</update>
	<delete id="deleteLostBoard" parameterType="LostBoardDTO">
		DELETE FROM LOSTBOARD
 		 WHERE CREATE_USER = #{createUser} AND CREATE_DATE = #{createDate}
	</delete>
	<insert id="insertCsLost" parameterType="LostBoardDTO">
		INSERT INTO LOSTBOARD
		VALUES 
		((SELECT *
		   FROM (SELECT IFNULL(MAX(CAST(LOSTIDX as unsigned)), 0) + 1
				   FROM LOSTBOARD) L)
		,#{loIdx}
		,#{ciIdx}
		,#{lostSubject}
		,#{lostContent}
		,NULL
		,0
		,#{createUser}
		,SYSDATE()
		,NULL
		,NULL
		)
	</insert>
	<select id="getLBSearchList" parameterType="map" resultType="LostBoardDTO">
		SELECT *,
		       (SELECT C.CI_NAME
		          FROM CINEMA AS C
		         WHERE C.LO_IDX = LOST.LO_IDX AND C.CI_IDX = LOST.CI_IDX) AS 'CI_NAME',
		       ROW_NUMBER() OVER (ORDER BY LOST.CREATE_DATE) AS RN
		  FROM LOSTBOARD AS LOST
		 WHERE 1 = 1
		 <if test="lostBoardDTO.loIdx != ''">
		   AND LO_IDX = #{lostBoardDTO.loIdx}
		 </if>
		 <if test="lostBoardDTO.ciIdx != ''">  
		   AND CI_IDX = #{lostBoardDTO.ciIdx}
		 </if>
		 <if test="lostBoardDTO.lostStatus != ''">  
		   AND LOSTSTATUS = #{lostBoardDTO.lostStatus}
		 </if>
		 <if test="lostBoardDTO.lostSubject != null">  
		   AND LOSTSUBJECT LIKE '%${lostBoardDTO.lostSubject}%' 
		 </if>
		 ORDER BY LOST.CREATE_DATE DESC
		 LIMIT #{pageDTO.startRow}, #{pageDTO.pageSize}		
	</select>
	<select id="getLBSearchCount" parameterType="LostBoardDTO" resultType="int">
	    SELECT COUNT(*) 
	    FROM LOSTBOARD
	    WHERE 1 = 1
	    <if test="loIdx != ''">	
	        AND LO_IDX = #{loIdx}
	    </if>
	    <if test="ciIdx != ''">
	        AND CI_IDX = #{ciIdx}
	    </if>
	    <if test="lostStatus != ''">
	        AND LOSTSTATUS = #{lostStatus}
	    </if>
	    <if test="lostSubject != null">
	        AND LOSTSUBJECT LIKE CONCAT('%', #{lostSubject}, '%')
	    </if>
	</select>
	<select id="myPageLostBoardList" parameterType="map" resultType="LostBoardDTO">
		SELECT *,
		       (SELECT C.CI_NAME
		          FROM CINEMA AS C
		         WHERE C.LO_IDX = LOST.LO_IDX AND C.CI_IDX = LOST.CI_IDX) AS 'CI_NAME',
		       ROW_NUMBER() OVER (ORDER BY LOST.CREATE_DATE) AS RN
		  FROM LOSTBOARD AS LOST
		 WHERE CREATE_USER = #{createUser} 
		 ORDER BY LOST.CREATE_DATE DESC
		 LIMIT #{pageDTO.startRow}, #{pageDTO.pageSize}
	</select>
	<select id="getMyPageLostCount" parameterType="String" resultType="int">
		SELECT COUNT(*) 
		  FROM LOSTBOARD
		 WHERE CREATE_USER = #{createUser} 
	</select>
	<select id="myLostStatusList" parameterType="map" resultType="LostBoardDTO">
		SELECT *,
		       (SELECT C.CI_NAME
		          FROM CINEMA AS C
		         WHERE C.LO_IDX = LOST.LO_IDX AND C.CI_IDX = LOST.CI_IDX) AS 'CI_NAME',
		       ROW_NUMBER() OVER (ORDER BY LOST.CREATE_DATE) AS RN
		  FROM LOSTBOARD AS LOST
		 WHERE CREATE_USER = #{createUser} AND LOSTSTATUS = #{lostStatus}
		 ORDER BY LOST.CREATE_DATE DESC
		 LIMIT #{pageDTO.startRow}, #{pageDTO.pageSize}
	</select>
	<select id="myPageLostStatusCount" parameterType="map" resultType="int">
		SELECT COUNT(*) 
		  FROM LOSTBOARD
		 WHERE CREATE_USER = #{createUser} AND LOSTSTATUS = #{lostStatus}
	</select>

	<select id="getMemberList" resultType="MemberDTO">
		SELECT * 
		  FROM MEMBERS
		 WHERE MEM_IDX IS NOT NULL
	</select>
	<select id="getMemCount" resultType="int">
		SELECT COUNT(*) 
	 	  FROM MEMBERS
	 	 WHERE MEM_IDX IS NOT NULL
	</select>
<!-- 	<insert id="insertQnaRes" parameterType="QnaBoardDTO"> -->
<!-- 		INSERT INTO RESPONSEDATA (QNAIDX, SUBJECT, RESPONSE, RESPONSE_USER, RESPONSE_DATE) -->
<!-- 		VALUES( -->
<!-- 		    SELECT QNAIDX -->
<!-- 		      FROM QNABOARD -->
<!-- 		     WHERE CREATE_USER = #{createUser} AND CREATE_DATE = #{createDate}, -->
<!-- 		    #{qnaSubject}, -->
<!-- 		    #{qnaResponse}, -->
<!-- 		    #{responseUser}, -->
<!-- 		    SYSDATE() -->
<!-- 			) -->
<!-- 	</insert> -->
	<insert id="insertQnaRes" parameterType="QnaBoardDTO">
	    INSERT INTO RESPONSEDATA (QNAIDX, SUBJECT, RESPONSE, RESPONSE_USER, RESPONSE_DATE)
	    SELECT QNAIDX,
	           #{qnaSubject},
	           #{qnaResponse},
	           #{responseUser},
	           SYSDATE()
	    FROM QNABOARD
	    WHERE CREATE_USER = #{createUser} AND CREATE_DATE = #{createDate}
	</insert>
	<insert id="insertResLost" parameterType="LostBoardDTO">
		INSERT INTO RESPONSEDATA (LOSTIDX, SUBJECT, RESPONSE, RESPONSE_USER, RESPONSE_DATE)
	    SELECT LOSTIDX,
	           #{lostSubject},
	           #{lostResponse},
	           #{responseUser},
	           SYSDATE()
	    FROM LOSTBOARD
	    WHERE CREATE_USER = #{createUser} AND CREATE_DATE = #{createDate}
	</insert>
	<select id="getResponseList" resultType="ResponseDataDTO">
		SELECT R.RESDATAIDX,Q.QNAIDX,NULL AS LOSTIDX, Q.CREATE_USER, Q.CREATE_DATE, R.SUBJECT,R.RESPONSE, R.RESPONSE_USER, R.RESPONSE_DATE
		  FROM QNABOARD Q JOIN RESPONSEDATA R
		    ON Q.QNAIDX = R.QNAIDX
		UNION ALL
		SELECT R.RESDATAIDX,NULL AS QNAIDX,L.LOSTIDX, L.CREATE_USER, L.CREATE_DATE, R.SUBJECT,R.RESPONSE, R.RESPONSE_USER, R.RESPONSE_DATE
		  FROM LOSTBOARD L JOIN RESPONSEDATA R    
		    ON L.LOSTIDX = R.LOSTIDX
	</select>
	
	<insert id="insertRecommend" parameterType="RecommendDTO">
		INSERT INTO RECOMMENDBOARD(RECOMMENDIDX,MOVIENAME,DIRECTOR,CREATE_USER,CREATE_DATE,COUNTRECO,POSTER)
		VALUES
		((SELECT *
			FROM (SELECT IFNULL(MAX(CAST(RECOMMENDIDX as unsigned)), 0) + 1
						   FROM RECOMMENDBOARD) R)
		,#{movieName}
		,#{director}
		,#{createUser}
		,SYSDATE()
		,0
		,#{poster}     
		);
	</insert>
	<select id="getRecommendList" parameterType="PageDTO" resultType="RecommendDTO">
SELECT *
  FROM RECOMMENDBOARD
 WHERE 
  YEAR(CREATE_DATE) = YEAR(CURRENT_TIMESTAMP) AND
  (
    (MONTH(CREATE_DATE) BETWEEN 1 AND 2 AND CREATE_DATE &lt; CONCAT(YEAR(CURRENT_TIMESTAMP), '-03-01')) OR
    (MONTH(CREATE_DATE) BETWEEN 3 AND 4 AND CREATE_DATE &lt; CONCAT(YEAR(CURRENT_TIMESTAMP), '-05-01')) OR
    (MONTH(CREATE_DATE) BETWEEN 5 AND 6 AND CREATE_DATE &lt; CONCAT(YEAR(CURRENT_TIMESTAMP), '-07-01')) OR
    (MONTH(CREATE_DATE) BETWEEN 7 AND 8 AND CREATE_DATE &lt; CONCAT(YEAR(CURRENT_TIMESTAMP), '-09-01')) OR
    (MONTH(CREATE_DATE) BETWEEN 9 AND 10 AND CREATE_DATE &lt; CONCAT(YEAR(CURRENT_TIMESTAMP), '-11-01'))
  )
  OR
  (
    MONTH(CREATE_DATE) BETWEEN 11 AND 12 AND 
    YEAR(CREATE_DATE) = YEAR(CURRENT_TIMESTAMP) + 1 AND 
    CREATE_DATE &lt; CONCAT(YEAR(CURRENT_TIMESTAMP) + 1, '-01-01')
  )
<choose>
    <when test="search == 'arrange'">
        ORDER BY COUNTRECO DESC
    </when>
    <otherwise>
        ORDER BY CREATE_DATE DESC
    </otherwise>
</choose>
LIMIT #{startRow}, #{pageSize}
	</select>
	<update id="plusRecoCount" parameterType="map">
		UPDATE RECOMMENDBOARD
		SET COUNTRECO = COUNTRECO + 1
		WHERE RECOMMENDIDX = #{recommendIdx}
		  AND #{recoUser} NOT IN (
		    SELECT RECO_USER
		      FROM RECODUPLICHK
		     WHERE DATE_ADD((SELECT MAX(RECO_DATE) FROM RECODUPLICHK WHERE RECO_USER = #{recoUser}), INTERVAL 1 MONTH) > SYSDATE()
		      AND RECO_USER = #{recoUser}
		    GROUP BY RECO_USER
		  )
	</update>
	<insert id="insertRecoUser" parameterType="map">
		INSERT INTO RECODUPLICHK(RECOMMENDIDX,RECO_USER,RECO_DATE)
		SELECT #{recommendIdx},#{recoUser},SYSDATE()
		  FROM DUAL
		 WHERE #{recoUser} NOT IN (
		    SELECT RECO_USER
		      FROM RECODUPLICHK
		     WHERE DATE_ADD((SELECT MAX(RECO_DATE) FROM RECODUPLICHK WHERE RECO_USER = #{recoUser}), INTERVAL 1 MONTH) > SYSDATE()
		      AND RECO_USER = #{recoUser}
		    GROUP BY RECO_USER
		  )
	</insert>
	<delete id="deleteRecoData" parameterType="int">
		DELETE FROM RECOMMENDBOARD
 		 WHERE RECOMMENDIDX = #{recommendIdx}
	</delete>
	<select id="getRecoBoardCount" resultType="int">
		SELECT COUNT(*) 
		  FROM RECOMMENDBOARD
	</select>
	<select id="searchRecoList" parameterType="map" resultType="RecommendDTO">
		SELECT *
		  FROM RECOMMENDBOARD
		 WHERE 
		  (YEAR(CREATE_DATE) = YEAR(CURRENT_TIMESTAMP) AND
		  (
		    (MONTH(CREATE_DATE) BETWEEN 1 AND 2 AND CREATE_DATE &lt; CONCAT(YEAR(CURRENT_TIMESTAMP), '-03-01')) OR
		    (MONTH(CREATE_DATE) BETWEEN 3 AND 4 AND CREATE_DATE &lt; CONCAT(YEAR(CURRENT_TIMESTAMP), '-05-01')) OR
		    (MONTH(CREATE_DATE) BETWEEN 5 AND 6 AND CREATE_DATE &lt; CONCAT(YEAR(CURRENT_TIMESTAMP), '-07-01')) OR
		    (MONTH(CREATE_DATE) BETWEEN 7 AND 8 AND CREATE_DATE &lt; CONCAT(YEAR(CURRENT_TIMESTAMP), '-09-01')) OR
		    (MONTH(CREATE_DATE) BETWEEN 9 AND 10 AND CREATE_DATE &lt; CONCAT(YEAR(CURRENT_TIMESTAMP), '-11-01'))
		  )
		  OR
		  (
		    MONTH(CREATE_DATE) BETWEEN 11 AND 12 AND 
		    YEAR(CREATE_DATE) = YEAR(CURRENT_TIMESTAMP) + 1 AND 
		    CREATE_DATE &lt; CONCAT(YEAR(CURRENT_TIMESTAMP) + 1, '-01-01')
		  )
		  )
		  AND MOVIENAME LIKE '%${movieName}%'
		ORDER BY CREATE_DATE DESC
		LIMIT #{pageDTO.startRow}, #{pageDTO.pageSize}
	</select>
	<select id="getRecoSrchCount" parameterType="String" resultType="int">
		SELECT COUNT(*) 
		  FROM RECOMMENDBOARD
		 WHERE MOVIENAME LIKE '%${movieName}%' 
	</select>
	
	<update id="updateMemStatus" parameterType="memberDTO">
		UPDATE MEMBERS
		   SET MEM_STATUS = #{memStatus}
		 <choose>
		    <when test="memStatus == 0">
		        ,MEM_STOP_D = NULL
		    </when>
		    <otherwise>
		        ,MEM_STOP_D = SYSDATE()
		    </otherwise>
		</choose>
		 WHERE MEM_ID = #{memId}
	</update>
	
	<select id="getResBoardList" parameterType="map" resultType="ReservationDTO">
		SELECT R.MERCHANT_UID, R.PAY_TIME, R.TITLE, R.CINEMA, R.SCR_IDX,R.P1,R.P2,R.P3,R.SEAT,DATE_FORMAT(R.DATE,'%y-%m-%d') AS 'DATE',R.S_TIME,DATE_FORMAT(S.SCH_ETIME,'%H:%i') AS SCH_ETIME,R.PAID_AMOUNT
		  FROM RESERVATION R JOIN SCHEDULE S
		    ON R.LO_IDX = S.LO_IDX AND R.CI_IDX = S.CI_IDX AND R.SCH_IDX = S.SCH_IDX AND LEFT(R.SCR_IDX,1) = S.SCR_IDX AND R.MOV_TYPE = S.SCH_MOV_TYPE
		 WHERE R.MEM_ID = #{memId} AND R.SUCCESS = 'TRUE'
	</select>
	<select id="getResBoardCount" parameterType="String" resultType="int">
		SELECT COUNT(*)
		  FROM RESERVATION R JOIN SCHEDULE S
		    ON R.LO_IDX = S.LO_IDX AND R.CI_IDX = S.CI_IDX AND R.SCH_IDX = S.SCH_IDX AND LEFT(R.SCR_IDX,1) = S.SCR_IDX AND R.MOV_TYPE = S.SCH_MOV_TYPE
		 WHERE R.MEM_ID = #{memId} AND R.SUCCESS = 'TRUE'
	</select>
</mapper>