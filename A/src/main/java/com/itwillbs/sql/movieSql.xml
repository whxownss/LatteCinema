<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<!-- 영화 삽입하는 sql -->
<mapper namespace="Movie">

	<insert id="insertMovie">
			INSERT INTO MOVIE
		 	 (
		 	   MOVIE_IDX 
		 	 , MOVIE_CODE
		 	 , TITLE
		 	 , ACTOR
		 	 , STILLCUT
		 	 , MOVIE_CATEGORY
		 	 , DIRECTOR
		 	 , GENRE
		 	 , OPENDATE
		 	 , RATING
		 	 , SYNOPSIS
		 	 , POSTER
		 	 , FILM_MADE
		 	 , NATION
		 	 , RUN_TIME
		 	 , START_DATE
		 	 , END_DATE)
		VALUES (
			  (
			  	SELECT *
		   		  FROM (SELECT IFNULL(MAX(CAST(MOVIE_IDX as unsigned)), 0) + 1
				   		  FROM MOVIE) M)	
			, #{movieCode}
		  	, #{title}
		  	, #{actor}
		  	, #{stillcut}
		  	, #{movieCategory}
		  	, #{director}
		  	, #{genre}
		  	, #{openDate}
		  	, #{rating} 
		  	, #{synopsis}
		  	, #{poster}
		  	, #{filmMade}
		  	, #{nation}
		  	, #{runTime}
		  	, SUBSTRING(#{startDate}, 1, 10)
		  	, SUBSTRING(#{endDate}, 1, 10))
	</insert>

	
	<!-- 라떼 영화 포스터 불러오는 sql -->
	<select id="getLattePoster" resultType="MovieDTO" parameterType="MovieDTO">
	SELECT POSTER, TITLE, MOVIE_CODE
	FROM MOVIE 
	WHERE MOVIE_CATEGORY = 'OLD' 
 <![CDATA[
	AND START_DATE <= NOW() 
	AND END_DATE > NOW() 
		   ]]>
	</select>

	<!-- 현재 상영 영화 포스터 불러오는 sql 박스오피스 -->
	<select id="getNowPoster" resultType="MovieDTO" parameterType="MovieDTO">
	SELECT POSTER, TITLE, MOVIE_CODE
	FROM MOVIE 
	WHERE MOVIE_CATEGORY = 'NOW'
	 <![CDATA[
	AND START_DATE <= NOW() 
	AND END_DATE > NOW() 
		   ]]>

	</select>


    <!--  영화 상세 정보 불러오는 sql -->
	<select id="getMovieDetail" resultType="MovieDTO" parameterType="MovieDTO">
	SELECT 
	  		   MOVIE_CODE
		 	 , TITLE
		 	 , DIRECTOR
		 	 , GENRE
		 	 , OPENDATE
		 	 , RATING
		 	 , SYNOPSIS
		 	 , POSTER
		 	 , FILM_MADE
		 	 , NATION
		 	 , RUN_TIME
		 	 , STILLCUT
		 	 , ACTOR
		 	 , MOVIE_IDX
		 	 , MOVIE_CATEGORY
	FROM MOVIE 
	WHERE MOVIE_CODE = #{movieCode}
	 

	</select>
	
	<select id="getMovieList" resultType="MovieDTO" parameterType="MovieDTO">
		SELECT 
		  		   MOVIE_CODE
			 	 , TITLE
			 	 , DIRECTOR
			 	 , OPENDATE
			 	 , RATING
				 , MOVIE_CATEGORY
				 , RUN_TIME
				 , MOVIE_IDX
		
		FROM MOVIE			 
	</select>

<!--한줄평 작성 가능 유무  -->								<!--c  -->
	<select id="checkWrite" parameterType="map" resultType="Integer">
		SELECT COUNT(*)
		  FROM RESERVATION R 
		  JOIN SCHEDULE S 
			ON R.LO_IDX = S.LO_IDX		
		   AND R.CI_IDX = S.CI_IDX
   		   AND R.SCH_IDX = S.SCH_IDX
   		   AND R.MOV_TYPE = S.SCH_MOV_TYPE
   		   AND R.MOV_IDX = S.SCH_MOV_IDX
   		 WHERE R.MEM_ID = #{memId}
   		   AND R.MOV_IDX = #{movIdx}
   		   AND R.MOV_TYPE = #{movType}
<!-- 	   		   AND NOW() > CONCAT(DATE_FORMAT(R.DATE, '%Y-%m-%d'), ' ', S.SCH_ETIME) -->
	</select> 
	
	<!--한줄평 담기  -->
	<insert id="reviewInsert" parameterType="ReviewDTO">
		INSERT INTO REVIEWS
			( REV_NUM
			, REV_COMMENT
			, REV_DATE
			, TITLE
			, MEM_ID
			, MOV_IDX
			, MOV_TYPE)
		VALUES (
			(SELECT *
				FROM (SELECT IFNULL(MAX(CAST(REV_NUM AS UNSIGNED)), 0) +1
						FROM REVIEWS) A)		
			, #{revComment}
			, #{revDate}
			, #{title}
			, #{memId}
			, #{movIdx}
			, #{movType}
			)
	</insert>

	<update id="updateMovie">
	  UPDATE MOVIE
	    SET
			    ACTOR = #{actor},
			    MOVIE_CATEGORY = #{movieCategory},
			    DIRECTOR = #{director},
			    GENRE = #{genre},
			    RATING = #{rating},
			    SYNOPSIS = #{synopsis},
			    POSTER = #{poster},
			    FILM_MADE = #{filmMade},
			    NATION = #{nation},
			    RUN_TIME = #{runTime},
			 <!--    START_DATE = SUBSTRING(#{startDate}, 1, 10),
			    END_DATE = SUBSTRING(#{endDate}, 1, 10), -->
			    START_DATE = #{startDate},
			    END_DATE = #{endDate}
			   
			    
	    WHERE	MOVIE_CODE = #{movieCode} 
	</update>


	<delete id="deleteMovie">
	
	  DELETE 
	  FROM MOVIE
	  WHERE MOVIE_CODE = #{movieCode}
	  
	</delete>
	
	
	

	
	
</mapper>